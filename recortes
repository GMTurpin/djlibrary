{% extends 'base.html' %}

{% block title %} Registro de prestamo {% endblock %}

{% block content %}
    {%  include 'includes/header.html' %}
<div class="grid-container">
    <div class ="grid-x grid-padding-x" style="background-color: #FFE4C4">
        <div class="cell large-8">
            <h1>Registro de prestamo</h1>
        </div>
        {%  include 'includes/formprestamo.html' %}
    </div>
</div>
{% endblock content %}

---------------------------------------------------------------
class Prestamo(models.Model):
    lector = models.ForeignKey(Lector, on_delete=models.CASCADE)
    libro = models.ForeignKey(Libro, on_delete=models.CASCADE, related_name='libro_prestamo')
    fecha_prestamo = models.DateField(verbose_name='Fecha de prestamo')
    vencimiento = models.DateField(verbose_name='Fecha de vencimiento', blank=True, null=True)
    fecha_devolucion = models.DateField(verbose_name='Fecha de devolucion', blank=True, null=True)
    devuelto = models.BooleanField(default=False)
    objects = PrestamoManager()


    class Meta:
        verbose_name = 'Control de Prestamos'
        verbose_name_plural = 'Control de Prestamos'
        ordering = ['fecha_prestamo']

    def __str__(self):
        return self.libro.titulo
---------------------------------------------------------------------------------------
class AddPrestamo(FormView):
    template_name = 'lector/add_prestamo.html'
    form_class = PrestamoForm
    success_url = '.'

    def get_queryset(self):
        queryset = Libro.objects.filter(stock__gt=0)
        return queryset


    def form_valid(self, form):
        obj, created = Prestamo.objects.get_or_create(
            libro = form.cleaned_data['libro'],
            lector = form.cleaned_data['lector'],
            devuelto=False,
            defaults={
                'fecha_prestamo': date.today(),
                'vencimiento': date.today() + timedelta(days=30),
            }
        )
        if created:
            messages.add_message(self.request, messages.SUCCESS, 'Prestamo exitoso')
            form.cleaned_data['libro'].stock = form.cleaned_data['libro'].stock - 1
            form.cleaned_data['libro'].save()
            return super(AddPrestamo, self).form_valid(form)
        else:
            messages.add_message(self.request, messages.ERROR, 'Este lector ya tiene prestado este libro')
            return HttpResponseRedirect('/')
----------------------------------------------------------------------------------------
class PrestamoUpdateView(UpdateView):
    model = Prestamo
    template_name = 'lector/update_prestamo.html'
    form_class = EditPrestamoForm
    success_url = reverse_lazy('lector_app:control_prestamo')

    def form_valid(self, form):
        prestamo = form.save(commit=False)
        if prestamo.fecha_devolucion!=None:
            prestamo.libro.stock = prestamo.libro.stock + 1
            prestamo.libro.save()
            prestamo.devuelto = True
        prestamo.save()
        return super(PrestamoUpdateView, self).form_valid(form)
----------------------------------------------------------------------------------------
class ListLibrosCat(ListView):
    context_object_name = 'lista_cats'
    template_name = 'libro/lista_cats.html'
    paginate_by = 6

    def get_context_data(self, **kwargs    ):
        context = super(ListLibrosCat, self).get_context_data(**kwargs)
        context['box_cats'] = Categoria.objects.all()
        return context

    def get_queryset(self):
        nombre_cat = self.request.GET.get('kword', '')
        return Libro.objects.libros_categoria(nombre_cat)
----------------------------------------------------------------------------------------
class Libro(models.Model):
    titulo = models.CharField(max_length=50)
    categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE, related_name='categoria_libro')
    autores = models.ManyToManyField(Autor)
    fecha_publicacion = models.DateField(verbose_name='Fecha de publicacion')
    sinopsis = ProseEditorField(
        blank=True, null=True,
        extensions={"Bold": True, "Italic": True, "Strike": True,},
        sanitize=True,
    )
    portada = models.ImageField(upload_to='portadas')
    visitas = models.PositiveIntegerField(default=0)
    stock = models.PositiveIntegerField(default=0)
    objects = LibroManager()